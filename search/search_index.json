{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyTabular What Does It Do? PyTabular allows for programmatic execution on your tabular models... In Python! How Does It Work? I basically took my two favorite things Python and Tabular Models and connected the two. Thanks to Pythonnet (3.0.0a2) and Microsoft's .Net APIs on Azure Analysis Services . The package should have the dll files included when you import the package. Getting Started Importing package python3 -m pip install python_tabular In your python environment, import pytabular and call the main Tabular Class. Only parameter needed is a solid connection string. import pytabular model = pytabular.Tabular(CONNECTION_STR) DAX Query model.Query(DAX_QUERY) # Returns a Pandas DataFrame Refresh Tables and Partitions #filter down the collection to what you want to refresh tables_to_refresh = [table for table in model.Tables if table.get_Name() in ['Table1','Table2','Table3']] #Queue up the tables and partitions that you want to refresh. model.Refresh(tables_to_refresh) #Once you are ready, update to execute the refresh model.Update() Built In Dax Query Helpers #Query Every Column model.Query_Every_Column() #Will return pd.DataFrame() #Query Every Table model.Query_Every_Table() #Will return pd.DataFrame() ''' NOTE, notice the default values for the query_function argument. Query_Every_Column will get COUNTROWS(VALUES(_)) and Query_Every_Table() will get COUNTROWS(_) with '_' being replaced with the dax identifier to the table or column in question. You can replace this str with anything you want. For example output the MIN(_) or MAX(_) of each column rather than the default queries. ''' Backup & Revert a Table in Memory model.Backup_Table('TableName') #This will backup the table with surround items (columns,measures,relationships,roles,hierarchies,etc.) and will add a suffix of '_backup' #Make any changes to your original table and then revert or delete backup as necessary model.Revert_Table('TableName') #This will essentially replace your original with _backup Run BPA from TE2 TE2 = pytabular.TE2() #Feel free to input your TE2 File path or this will download for you. BPA = pytabular.BPA() #Fee free to input your own BPA file or this will download for you from: https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json model.Analyze_BPA(TE2.EXE_Path,BPA.Location) #This will output a list of BPA violations...","title":"Home"},{"location":"#pytabular","text":"","title":"PyTabular"},{"location":"#what-does-it-do","text":"PyTabular allows for programmatic execution on your tabular models... In Python!","title":"What Does It Do?"},{"location":"#how-does-it-work","text":"I basically took my two favorite things Python and Tabular Models and connected the two. Thanks to Pythonnet (3.0.0a2) and Microsoft's .Net APIs on Azure Analysis Services . The package should have the dll files included when you import the package.","title":"How Does It Work?"},{"location":"#getting-started","text":"Importing package python3 -m pip install python_tabular In your python environment, import pytabular and call the main Tabular Class. Only parameter needed is a solid connection string. import pytabular model = pytabular.Tabular(CONNECTION_STR) DAX Query model.Query(DAX_QUERY) # Returns a Pandas DataFrame Refresh Tables and Partitions #filter down the collection to what you want to refresh tables_to_refresh = [table for table in model.Tables if table.get_Name() in ['Table1','Table2','Table3']] #Queue up the tables and partitions that you want to refresh. model.Refresh(tables_to_refresh) #Once you are ready, update to execute the refresh model.Update() Built In Dax Query Helpers #Query Every Column model.Query_Every_Column() #Will return pd.DataFrame() #Query Every Table model.Query_Every_Table() #Will return pd.DataFrame() ''' NOTE, notice the default values for the query_function argument. Query_Every_Column will get COUNTROWS(VALUES(_)) and Query_Every_Table() will get COUNTROWS(_) with '_' being replaced with the dax identifier to the table or column in question. You can replace this str with anything you want. For example output the MIN(_) or MAX(_) of each column rather than the default queries. ''' Backup & Revert a Table in Memory model.Backup_Table('TableName') #This will backup the table with surround items (columns,measures,relationships,roles,hierarchies,etc.) and will add a suffix of '_backup' #Make any changes to your original table and then revert or delete backup as necessary model.Revert_Table('TableName') #This will essentially replace your original with _backup Run BPA from TE2 TE2 = pytabular.TE2() #Feel free to input your TE2 File path or this will download for you. BPA = pytabular.BPA() #Fee free to input your own BPA file or this will download for you from: https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json model.Analyze_BPA(TE2.EXE_Path,BPA.Location) #This will output a list of BPA violations...","title":"Getting Started"},{"location":"BPA/","text":"BPA source BPA( rules_location: str = 'https: //raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json' ) Best Practice Analyzer Class Can provide Url, Json File Path, or Python List. If nothing is provided it will default to Microsofts Analysis Services report with BPA Rules. https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json","title":"BPA"},{"location":"BPA/#_1","text":"","title":""},{"location":"BPA/#bpa","text":"source BPA( rules_location: str = 'https: //raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json' ) Best Practice Analyzer Class Can provide Url, Json File Path, or Python List. If nothing is provided it will default to Microsofts Analysis Services report with BPA Rules. https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json","title":"BPA"},{"location":"Examples/","text":"Return_Zero_Row_Tables source .Return_Zero_Row_Tables( model: pytabular.Tabular ) Returns list of table names of those that are returning isna() Args model (pytabular.Tabular) : Tabular Model Returns List of table names where DAX COUNTROWS('Table Name') is nan or 0. Table_Last_Refresh_Times source .Table_Last_Refresh_Times( model: pytabular.Tabular, group_partition: bool = True ) Returns pd.DataFrame of tables with their latest refresh time. Optional 'group_partition' variable, default is True. If False an extra column will be include to have the last refresh time to the grain of the partition Example to add to model model.Create_Table(p.Table_Last_Refresh_Times(model),'RefreshTimes') Args model (pytabular.Tabular) : Tabular Model group_partition (bool, optional) : Whether or not you want the grain of the dataframe to be by table or by partition. Defaults to True. Returns DataFrame : pd dataframe with the RefreshedTime property: https://docs.microsoft.com/en-us/dotnet/api/microsoft.analysisservices.tabular.partition.refreshedtime?view=analysisservices-dotnet#microsoft-analysisservices-tabular-partition-refreshedtime If group_partition == True and the table has multiple partitions, then df.groupby(by[\"tables\"]).max()","title":"Examples"},{"location":"Examples/#_1","text":"","title":""},{"location":"Examples/#return_zero_row_tables","text":"source .Return_Zero_Row_Tables( model: pytabular.Tabular ) Returns list of table names of those that are returning isna() Args model (pytabular.Tabular) : Tabular Model Returns List of table names where DAX COUNTROWS('Table Name') is nan or 0.","title":"Return_Zero_Row_Tables"},{"location":"Examples/#table_last_refresh_times","text":"source .Table_Last_Refresh_Times( model: pytabular.Tabular, group_partition: bool = True ) Returns pd.DataFrame of tables with their latest refresh time. Optional 'group_partition' variable, default is True. If False an extra column will be include to have the last refresh time to the grain of the partition Example to add to model model.Create_Table(p.Table_Last_Refresh_Times(model),'RefreshTimes') Args model (pytabular.Tabular) : Tabular Model group_partition (bool, optional) : Whether or not you want the grain of the dataframe to be by table or by partition. Defaults to True. Returns DataFrame : pd dataframe with the RefreshedTime property: https://docs.microsoft.com/en-us/dotnet/api/microsoft.analysisservices.tabular.partition.refreshedtime?view=analysisservices-dotnet#microsoft-analysisservices-tabular-partition-refreshedtime If group_partition == True and the table has multiple partitions, then df.groupby(by[\"tables\"]).max()","title":"Table_Last_Refresh_Times"},{"location":"TE2/","text":"TE2 source TE2( TE_Location = 'https: //github.com/TabularEditor/TabularEditor/releases/download/2.16.7/TabularEditor.Portable.zip' ) TE2 Class, to use any built TabularEditor Command Line Scripts https://docs.tabulareditor.com/te2/Command-line-Options.html https://github.com/TabularEditor/TabularEditor/releases/download/2.16.7/TabularEditor.Portable.zip https://cdn.tabulareditor.com/files/TabularEditor.2.16.7.zip","title":"TE2"},{"location":"TE2/#_1","text":"","title":""},{"location":"TE2/#te2","text":"source TE2( TE_Location = 'https: //github.com/TabularEditor/TabularEditor/releases/download/2.16.7/TabularEditor.Portable.zip' ) TE2 Class, to use any built TabularEditor Command Line Scripts https://docs.tabulareditor.com/te2/Command-line-Options.html","title":"TE2"},{"location":"TE2/#httpsgithubcomtabulareditortabulareditorreleasesdownload2167tabulareditorportablezip","text":"","title":"https://github.com/TabularEditor/TabularEditor/releases/download/2.16.7/TabularEditor.Portable.zip"},{"location":"TE2/#httpscdntabulareditorcomfilestabulareditor2167zip","text":"","title":"https://cdn.tabulareditor.com/files/TabularEditor.2.16.7.zip"},{"location":"Tabular/","text":"Tabular source Tabular( CONNECTION_STR: str ) Tabular Class Initialization. Input Connection String then you are off to the races... This will be your best friend: https://docs.microsoft.com/en-us/dotnet/api/microsoft.analysisservices.tabular?view=analysisservices-dotnet Args CONNECTION_STR (str) : https://docs.microsoft.com/en-us/analysis-services/instances/connection-string-properties-analysis-services?view=asallproducts-allversions Methods: .Disconnect source .Disconnect() Disconnects from Model Returns bool : True if successful, False if unsuccessful .Refresh source .Refresh( iterable_items: List, RefreshType = RefreshType.Full ) Input iterable Collections for the function to run through. It will add the collection items into a Refresh Request. To execute refresh run through Update() Args iterable_items (List) : Must be refreshable Tabular objects. RefreshType ( type , optional) : description . Defaults to RefreshType.Full. .Update source .Update( UpdateOptions: UpdateOptions = UpdateOptions.ExpandFull ) Really just this... https://docs.microsoft.com/en-us/dotnet/api/microsoft.analysisservices.majorobject.update?view=analysisservices-dotnet#microsoft-analysisservices-majorobject-update(microsoft-analysisservices-updateoptions) Args UpdateOptions (UpdateOptions, optional) : See above MS Doc link. Defaults to UpdateOptions.ExpandFull. Returns None : Placeholder to eventually change. .Backup_Table source .Backup_Table( table_str: str ) USE WITH CAUTION, EXPERIMENTAL. Backs up table in memory, brings with it measures, columns, hierarchies, relationships, roles, etc. It will add suffix '_backup' to all objects. Refresh is performed from source during backup. Args table_str (str, optional) : Name of Table. Returns bool : Returns True if Successful, else will return error. .Revert_Table source .Revert_Table( table_str: str ) USE WITH CAUTION, EXPERIMENTAL. This is used in conjunction with Backup_Table(). It will take the 'TableName_backup' and replace with the original. Example scenario -> 1. model.Backup_Table('TableName') 2. #perform any proposed changes in original 'TableName' 3. #validate changes in 'TableName' 4. #if unsuccessful run model.Revert_Table('TableName') Args table_str (str) : Name of table. Returns bool : Returns True if Successful, else will return error. .Query source .Query( Query_Str: str ) Executes Query on Model and Returns Results in Pandas DataFrame Args Query_Str (str) : Dax Query. Note, needs full syntax (ex: EVALUATE). See https://docs.microsoft.com/en-us/dax/dax-queries Returns DataFrame : Returns dataframe with results .Query_Every_Column source .Query_Every_Column( query_function: str = 'COUNTROWS(VALUES(_))' ) This will dynamically create a query to pull all columns from the model and run the query function. It will replace the _ with the column to run. Args query_function (str, optional) : Dax query is dynamically building a query with the UNION & ROW DAX Functions. Example -> EVALUATE UNION( ROW(\"Table_Name\", \"Table1\", \"Column_Name\", \"Column1\", \"COUNTROWS(VALUES( ))\", COUNTROWS(VALUES(\"Column1\"))), ROW(\"Table_Name\", \"Table1\", \"Column_Name\", \"Column2\", \"COUNTROWS(VALUES( ))\", COUNTROWS(VALUES(\"Column2\"))), ROW(\"Table_Name\", \"Table2\", \"Column_Name\", \"Column1\", \"COUNTROWS(VALUES(_))\", COUNTROWS(VALUES(\"Column1\"))) ) Defaults to 'COUNTROWS(VALUES(_))'. Returns DataFrame : Returns dataframe with results. .Query_Every_Table source .Query_Every_Table( query_function: str = 'COUNTROWS(_)' ) This will dynamically create a query to pull all tables from the model and run the query function. It will replace the _ with the table to run. Args query_function (str, optional) : Dax query is dynamically building a query with the UNION & ROW DAX Functions. Example -> EVALUATE UNION( ROW(\"Table_Name\", \"Table1\", \"COUNTROWS( )\", COUNTROWS(\"Table1\")), ROW(\"Table_Name\", \"Table2\", \"COUNTROWS( )\", COUNTROWS(\"Table2\")), ROW(\"Table_Name\", \"Table3\", \"COUNTROWS( )\", COUNTROWS(\"Table3\")) ). Defaults to 'COUNTROWS( )'. Returns DataFrame : Returns dataframe with results .Analyze_BPA source .Analyze_BPA( Tabular_Editor_Exe: str, Best_Practice_Analyzer: str ) Takes your Tabular Model and performs TE2s BPA. Runs through Command line. https://docs.tabulareditor.com/te2/Best-Practice-Analyzer.html https://docs.tabulareditor.com/te2/Command-line-Options.html Args Tabular_Editor_Exe (str) : TE2 Exe File path. Feel free to use class TE2().EXE_Path or provide your own. Best_Practice_Analyzer (str) : BPA json file path. Feel free to use class BPA().Location or provide your own. Defualts to https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json Returns Assuming no failure, will return list of BPA violations. Else will return error from command line. .Create_Table source .Create_Table( df: pd.DataFrame, table_name: str ) Creates tables from pd.DataFrame as an M-Partition. So will convert the dataframe to M-Partition logic via the M query table constructor. Runs refresh and will update model. Args df (pd.DataFrame) : DataFrame to add to model table_name (str) : description Returns bool : True if successful","title":"Tabular"},{"location":"Tabular/#_1","text":"","title":""},{"location":"Tabular/#tabular","text":"source Tabular( CONNECTION_STR: str ) Tabular Class Initialization. Input Connection String then you are off to the races... This will be your best friend: https://docs.microsoft.com/en-us/dotnet/api/microsoft.analysisservices.tabular?view=analysisservices-dotnet Args CONNECTION_STR (str) : https://docs.microsoft.com/en-us/analysis-services/instances/connection-string-properties-analysis-services?view=asallproducts-allversions Methods:","title":"Tabular"},{"location":"Tabular/#disconnect","text":"source .Disconnect() Disconnects from Model Returns bool : True if successful, False if unsuccessful","title":".Disconnect"},{"location":"Tabular/#refresh","text":"source .Refresh( iterable_items: List, RefreshType = RefreshType.Full ) Input iterable Collections for the function to run through. It will add the collection items into a Refresh Request. To execute refresh run through Update() Args iterable_items (List) : Must be refreshable Tabular objects. RefreshType ( type , optional) : description . Defaults to RefreshType.Full.","title":".Refresh"},{"location":"Tabular/#update","text":"source .Update( UpdateOptions: UpdateOptions = UpdateOptions.ExpandFull ) Really just this... https://docs.microsoft.com/en-us/dotnet/api/microsoft.analysisservices.majorobject.update?view=analysisservices-dotnet#microsoft-analysisservices-majorobject-update(microsoft-analysisservices-updateoptions) Args UpdateOptions (UpdateOptions, optional) : See above MS Doc link. Defaults to UpdateOptions.ExpandFull. Returns None : Placeholder to eventually change.","title":".Update"},{"location":"Tabular/#backup_table","text":"source .Backup_Table( table_str: str ) USE WITH CAUTION, EXPERIMENTAL. Backs up table in memory, brings with it measures, columns, hierarchies, relationships, roles, etc. It will add suffix '_backup' to all objects. Refresh is performed from source during backup. Args table_str (str, optional) : Name of Table. Returns bool : Returns True if Successful, else will return error.","title":".Backup_Table"},{"location":"Tabular/#revert_table","text":"source .Revert_Table( table_str: str ) USE WITH CAUTION, EXPERIMENTAL. This is used in conjunction with Backup_Table(). It will take the 'TableName_backup' and replace with the original. Example scenario -> 1. model.Backup_Table('TableName') 2. #perform any proposed changes in original 'TableName' 3. #validate changes in 'TableName' 4. #if unsuccessful run model.Revert_Table('TableName') Args table_str (str) : Name of table. Returns bool : Returns True if Successful, else will return error.","title":".Revert_Table"},{"location":"Tabular/#query","text":"source .Query( Query_Str: str ) Executes Query on Model and Returns Results in Pandas DataFrame Args Query_Str (str) : Dax Query. Note, needs full syntax (ex: EVALUATE). See https://docs.microsoft.com/en-us/dax/dax-queries Returns DataFrame : Returns dataframe with results","title":".Query"},{"location":"Tabular/#query_every_column","text":"source .Query_Every_Column( query_function: str = 'COUNTROWS(VALUES(_))' ) This will dynamically create a query to pull all columns from the model and run the query function. It will replace the _ with the column to run. Args query_function (str, optional) : Dax query is dynamically building a query with the UNION & ROW DAX Functions. Example -> EVALUATE UNION( ROW(\"Table_Name\", \"Table1\", \"Column_Name\", \"Column1\", \"COUNTROWS(VALUES( ))\", COUNTROWS(VALUES(\"Column1\"))), ROW(\"Table_Name\", \"Table1\", \"Column_Name\", \"Column2\", \"COUNTROWS(VALUES( ))\", COUNTROWS(VALUES(\"Column2\"))), ROW(\"Table_Name\", \"Table2\", \"Column_Name\", \"Column1\", \"COUNTROWS(VALUES(_))\", COUNTROWS(VALUES(\"Column1\"))) ) Defaults to 'COUNTROWS(VALUES(_))'. Returns DataFrame : Returns dataframe with results.","title":".Query_Every_Column"},{"location":"Tabular/#query_every_table","text":"source .Query_Every_Table( query_function: str = 'COUNTROWS(_)' ) This will dynamically create a query to pull all tables from the model and run the query function. It will replace the _ with the table to run. Args query_function (str, optional) : Dax query is dynamically building a query with the UNION & ROW DAX Functions. Example -> EVALUATE UNION( ROW(\"Table_Name\", \"Table1\", \"COUNTROWS( )\", COUNTROWS(\"Table1\")), ROW(\"Table_Name\", \"Table2\", \"COUNTROWS( )\", COUNTROWS(\"Table2\")), ROW(\"Table_Name\", \"Table3\", \"COUNTROWS( )\", COUNTROWS(\"Table3\")) ). Defaults to 'COUNTROWS( )'. Returns DataFrame : Returns dataframe with results","title":".Query_Every_Table"},{"location":"Tabular/#analyze_bpa","text":"source .Analyze_BPA( Tabular_Editor_Exe: str, Best_Practice_Analyzer: str ) Takes your Tabular Model and performs TE2s BPA. Runs through Command line. https://docs.tabulareditor.com/te2/Best-Practice-Analyzer.html https://docs.tabulareditor.com/te2/Command-line-Options.html Args Tabular_Editor_Exe (str) : TE2 Exe File path. Feel free to use class TE2().EXE_Path or provide your own. Best_Practice_Analyzer (str) : BPA json file path. Feel free to use class BPA().Location or provide your own. Defualts to https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json Returns Assuming no failure, will return list of BPA violations. Else will return error from command line.","title":".Analyze_BPA"},{"location":"Tabular/#create_table","text":"source .Create_Table( df: pd.DataFrame, table_name: str ) Creates tables from pd.DataFrame as an M-Partition. So will convert the dataframe to M-Partition logic via the M query table constructor. Runs refresh and will update model. Args df (pd.DataFrame) : DataFrame to add to model table_name (str) : description Returns bool : True if successful","title":".Create_Table"},{"location":"Utils/","text":"ticks_to_datetime source .ticks_to_datetime( ticks: int ) Converts a C# System DateTime Tick into a Python DateTime Args ticks (int) : C# DateTime Tick -> https://docs.microsoft.com/en-us/dotnet/api/system.datetime.ticks?view=net-6.0 Returns datetime : datetime.datetime value","title":"Utils"},{"location":"Utils/#_1","text":"","title":""},{"location":"Utils/#ticks_to_datetime","text":"source .ticks_to_datetime( ticks: int ) Converts a C# System DateTime Tick into a Python DateTime Args ticks (int) : C# DateTime Tick -> https://docs.microsoft.com/en-us/dotnet/api/system.datetime.ticks?view=net-6.0 Returns datetime : datetime.datetime value","title":"ticks_to_datetime"}]}