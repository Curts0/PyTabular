{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyTabular What is it? PyTabular is a python package that allows for programmatic execution on your tabular models! This is possible thanks to Pythonnet and Microsoft's .Net APIs on Azure Analysis Services . The package should have the dll files included when you import it. See Documentation Here Getting Started python3 -m pip install python_tabular In your python environment, import pytabular and call the main Tabular Class. Only parameter needed is a solid connection string. import pytabular model = pytabular.Tabular(CONNECTION_STR) DAX Query model.Query(DAX_QUERY) # Returns a Pandas DataFrame Refresh Tables and Partitions #Can be str(table name only), Table object, Partition object, or an iterable combination of the three. model.Refresh('Table Name') tables_to_refresh = ['Table Name 1', 'Table Name 2', <Table Class>, <Partition Class>] #Queue up the tables and partitions that you want to refresh. model.Refresh(tables_to_refresh) #NOTE if you monitor the logs you will notice a Trace is executed on the refreshes. Built In Dax Query Helpers #Query Every Column model.Query_Every_Column() #Will return pd.DataFrame() #Query Every Table model.Query_Every_Table() #Will return pd.DataFrame() ''' NOTE, notice the default values for the query_function argument. Query_Every_Column will get COUNTROWS(VALUES(_)) and Query_Every_Table() will get COUNTROWS(_) with '_' being replaced with the dax identifier to the table or column in question. You can replace this str with anything you want. For example output the MIN(_) or MAX(_) of each column rather than the default queries. ''' Backup & Revert a Table in Memory model.Backup_Table('TableName') #This will backup the table with surround items (columns,measures,relationships,roles,hierarchies,etc.) and will add a suffix of '_backup' #Make any changes to your original table and then revert or delete backup as necessary model.Revert_Table('TableName') #This will essentially replace your original with _backup Run BPA from TE2 TE2 = pytabular.TE2() #Feel free to input your TE2 File path or this will download for you. BPA = pytabular.BPA() #Fee free to input your own BPA file or this will download for you from: https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json model.Analyze_BPA(TE2.EXE_Path,BPA.Location) #This will output a list of BPA violations...","title":"Home"},{"location":"#pytabular","text":"","title":"PyTabular"},{"location":"#what-is-it","text":"PyTabular is a python package that allows for programmatic execution on your tabular models! This is possible thanks to Pythonnet and Microsoft's .Net APIs on Azure Analysis Services . The package should have the dll files included when you import it. See Documentation Here","title":"What is it?"},{"location":"#getting-started","text":"python3 -m pip install python_tabular In your python environment, import pytabular and call the main Tabular Class. Only parameter needed is a solid connection string. import pytabular model = pytabular.Tabular(CONNECTION_STR) DAX Query model.Query(DAX_QUERY) # Returns a Pandas DataFrame Refresh Tables and Partitions #Can be str(table name only), Table object, Partition object, or an iterable combination of the three. model.Refresh('Table Name') tables_to_refresh = ['Table Name 1', 'Table Name 2', <Table Class>, <Partition Class>] #Queue up the tables and partitions that you want to refresh. model.Refresh(tables_to_refresh) #NOTE if you monitor the logs you will notice a Trace is executed on the refreshes. Built In Dax Query Helpers #Query Every Column model.Query_Every_Column() #Will return pd.DataFrame() #Query Every Table model.Query_Every_Table() #Will return pd.DataFrame() ''' NOTE, notice the default values for the query_function argument. Query_Every_Column will get COUNTROWS(VALUES(_)) and Query_Every_Table() will get COUNTROWS(_) with '_' being replaced with the dax identifier to the table or column in question. You can replace this str with anything you want. For example output the MIN(_) or MAX(_) of each column rather than the default queries. ''' Backup & Revert a Table in Memory model.Backup_Table('TableName') #This will backup the table with surround items (columns,measures,relationships,roles,hierarchies,etc.) and will add a suffix of '_backup' #Make any changes to your original table and then revert or delete backup as necessary model.Revert_Table('TableName') #This will essentially replace your original with _backup Run BPA from TE2 TE2 = pytabular.TE2() #Feel free to input your TE2 File path or this will download for you. BPA = pytabular.BPA() #Fee free to input your own BPA file or this will download for you from: https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json model.Analyze_BPA(TE2.EXE_Path,BPA.Location) #This will output a list of BPA violations...","title":"Getting Started"},{"location":"Best%20Practice%20Analyzer/","text":"BPA source BPA( File_Path: str = 'Default' ) Setting BPA Class for future work... Download_BPA_File source .Download_BPA_File( Download_Location: str = 'https: //raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json', Folder: str = 'Best_Practice_Analyzer', Auto_Remove = True ) Runs a request.get() to retrieve the json file from web. Will return and store in directory. Will also register the removal of the new directory and file when exiting program. Args Download_Location ( type , optional) : F. Defaults to [Microsoft GitHub BPA]'https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json'. Folder (str, optional) : New Folder String. Defaults to 'Best_Practice_Analyzer'. Auto_Remove (bool, optional) : If you wish to Auto Remove when script exits. Defaults to True. Returns str : File Path for the newly downloaded BPA.","title":"Best Practice Analyzer"},{"location":"Best%20Practice%20Analyzer/#_1","text":"","title":""},{"location":"Best%20Practice%20Analyzer/#bpa","text":"source BPA( File_Path: str = 'Default' ) Setting BPA Class for future work...","title":"BPA"},{"location":"Best%20Practice%20Analyzer/#download_bpa_file","text":"source .Download_BPA_File( Download_Location: str = 'https: //raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json', Folder: str = 'Best_Practice_Analyzer', Auto_Remove = True ) Runs a request.get() to retrieve the json file from web. Will return and store in directory. Will also register the removal of the new directory and file when exiting program. Args Download_Location ( type , optional) : F. Defaults to [Microsoft GitHub BPA]'https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json'. Folder (str, optional) : New Folder String. Defaults to 'Best_Practice_Analyzer'. Auto_Remove (bool, optional) : If you wish to Auto Remove when script exits. Defaults to True. Returns str : File Path for the newly downloaded BPA.","title":"Download_BPA_File"},{"location":"Examples/","text":"Return_Zero_Row_Tables source .Return_Zero_Row_Tables( model: pytabular.Tabular ) Returns list of table names of those that are returning isna() Args model (pytabular.Tabular) : Tabular Model Returns List of table names where DAX COUNTROWS('Table Name') is nan or 0. Table_Last_Refresh_Times source .Table_Last_Refresh_Times( model: pytabular.Tabular, group_partition: bool = True ) Returns pd.DataFrame of tables with their latest refresh time. Optional 'group_partition' variable, default is True. If False an extra column will be include to have the last refresh time to the grain of the partition Example to add to model model.Create_Table(p.Table_Last_Refresh_Times(model),'RefreshTimes') Args model (pytabular.Tabular) : Tabular Model group_partition (bool, optional) : Whether or not you want the grain of the dataframe to be by table or by partition. Defaults to True. Returns DataFrame : pd dataframe with the RefreshedTime property: https://docs.microsoft.com/en-us/dotnet/api/microsoft.analysisservices.tabular.partition.refreshedtime?view=analysisservices-dotnet#microsoft-analysisservices-tabular-partition-refreshedtime If group_partition == True and the table has multiple partitions, then df.groupby(by[\"tables\"]).max() BPA_Violations_To_DF source .BPA_Violations_To_DF( model: pytabular.Tabular, te2: str, bpa: str ) Runs BPA Analyzer from TE2 and outputs result into a DF. Args model (pytabular.Tabular) : Tabular Model Class te2 (str) : TE2 Exe File Path (Can use TE2().EXE_path) bpa (str) : BPA File Location (Can use BPA().Location) Returns DataFrame : Super simple right now. Just splits into two columns.. The object in violation and the rule.","title":"Examples"},{"location":"Examples/#_1","text":"","title":""},{"location":"Examples/#return_zero_row_tables","text":"source .Return_Zero_Row_Tables( model: pytabular.Tabular ) Returns list of table names of those that are returning isna() Args model (pytabular.Tabular) : Tabular Model Returns List of table names where DAX COUNTROWS('Table Name') is nan or 0.","title":"Return_Zero_Row_Tables"},{"location":"Examples/#table_last_refresh_times","text":"source .Table_Last_Refresh_Times( model: pytabular.Tabular, group_partition: bool = True ) Returns pd.DataFrame of tables with their latest refresh time. Optional 'group_partition' variable, default is True. If False an extra column will be include to have the last refresh time to the grain of the partition Example to add to model model.Create_Table(p.Table_Last_Refresh_Times(model),'RefreshTimes') Args model (pytabular.Tabular) : Tabular Model group_partition (bool, optional) : Whether or not you want the grain of the dataframe to be by table or by partition. Defaults to True. Returns DataFrame : pd dataframe with the RefreshedTime property: https://docs.microsoft.com/en-us/dotnet/api/microsoft.analysisservices.tabular.partition.refreshedtime?view=analysisservices-dotnet#microsoft-analysisservices-tabular-partition-refreshedtime If group_partition == True and the table has multiple partitions, then df.groupby(by[\"tables\"]).max()","title":"Table_Last_Refresh_Times"},{"location":"Examples/#bpa_violations_to_df","text":"source .BPA_Violations_To_DF( model: pytabular.Tabular, te2: str, bpa: str ) Runs BPA Analyzer from TE2 and outputs result into a DF. Args model (pytabular.Tabular) : Tabular Model Class te2 (str) : TE2 Exe File Path (Can use TE2().EXE_path) bpa (str) : BPA File Location (Can use BPA().Location) Returns DataFrame : Super simple right now. Just splits into two columns.. The object in violation and the rule.","title":"BPA_Violations_To_DF"},{"location":"Logic%20Utils/","text":"ticks_to_datetime source .ticks_to_datetime( ticks: int ) Converts a C# System DateTime Tick into a Python DateTime Args ticks (int) : C# DateTime Tick Returns datetime : datetime.datetime pandas_datatype_to_tabular_datatype source .pandas_datatype_to_tabular_datatype( df: pd.DataFrame ) WiP takes dataframe columns and gets respective tabular column datatype. ( NumPy Datatypes and Tabular Datatypes ) Args df (pd.DataFrame) : Pandas DataFrame Returns Dict : EX {'col1': , 'col2': , 'col3': } pd_dataframe_to_m_expression source .pd_dataframe_to_m_expression( df: pd.DataFrame ) This will take a pandas dataframe and convert to an m expression For example this DF: col1 col2 0 1 3 1 2 4 | | V Will convert to this expression string: let Source=#table({\"col1\",\"col2\"}, { {\"1\",\"3\"},{\"2\",\"4\"} }) in Source Args df (pd.DataFrame) : Pandas DataFrame Returns str : Currently only returning string values in your tabular model. remove_folder_and_contents source .remove_folder_and_contents( folder_location ) Internal used in tabular_editor.py and best_practice_analyzer.py. Args folder_location (str) : Folder path to remove directory and contents.","title":"Logic Utils"},{"location":"Logic%20Utils/#_1","text":"","title":""},{"location":"Logic%20Utils/#ticks_to_datetime","text":"source .ticks_to_datetime( ticks: int ) Converts a C# System DateTime Tick into a Python DateTime Args ticks (int) : C# DateTime Tick Returns datetime : datetime.datetime","title":"ticks_to_datetime"},{"location":"Logic%20Utils/#pandas_datatype_to_tabular_datatype","text":"source .pandas_datatype_to_tabular_datatype( df: pd.DataFrame ) WiP takes dataframe columns and gets respective tabular column datatype. ( NumPy Datatypes and Tabular Datatypes ) Args df (pd.DataFrame) : Pandas DataFrame Returns Dict : EX {'col1': , 'col2': , 'col3': }","title":"pandas_datatype_to_tabular_datatype"},{"location":"Logic%20Utils/#pd_dataframe_to_m_expression","text":"source .pd_dataframe_to_m_expression( df: pd.DataFrame ) This will take a pandas dataframe and convert to an m expression For example this DF: col1 col2 0 1 3 1 2 4 | | V Will convert to this expression string: let Source=#table({\"col1\",\"col2\"}, { {\"1\",\"3\"},{\"2\",\"4\"} }) in Source Args df (pd.DataFrame) : Pandas DataFrame Returns str : Currently only returning string values in your tabular model.","title":"pd_dataframe_to_m_expression"},{"location":"Logic%20Utils/#remove_folder_and_contents","text":"source .remove_folder_and_contents( folder_location ) Internal used in tabular_editor.py and best_practice_analyzer.py. Args folder_location (str) : Folder path to remove directory and contents.","title":"remove_folder_and_contents"},{"location":"Tabular%20Editor%202/","text":"Tabular_Editor source Tabular_Editor( EXE_File_Path: str = 'Default' ) Setting Tabular_Editor Class for future work. Download_Tabular_Editor source .Download_Tabular_Editor( Download_Location: str = 'https: //github.com/TabularEditor/TabularEditor/releases/download/2.16.7/TabularEditor.Portable.zip', Folder: str = 'Tabular_Editor_2', Auto_Remove = True ) Runs a request.get() to retrieve the zip file from web. Will unzip response and store in directory. Will also register the removal of the new directory and files when exiting program. Args Download_Location (str, optional) : File path for zip of Tabular Editor 2. Defaults to [Tabular Editor 2 Github Zip Location]'https://github.com/TabularEditor/TabularEditor/releases/download/2.16.7/TabularEditor.Portable.zip'. Folder (str, optional) : New Folder Location. Defaults to 'Tabular_Editor_2'. Auto_Remove (bool, optional) : Boolean to determine auto removal of files once script exits. Defaults to True. Returns str : description","title":"Tabular Editor"},{"location":"Tabular%20Editor%202/#_1","text":"","title":""},{"location":"Tabular%20Editor%202/#tabular_editor","text":"source Tabular_Editor( EXE_File_Path: str = 'Default' ) Setting Tabular_Editor Class for future work.","title":"Tabular_Editor"},{"location":"Tabular%20Editor%202/#download_tabular_editor","text":"source .Download_Tabular_Editor( Download_Location: str = 'https: //github.com/TabularEditor/TabularEditor/releases/download/2.16.7/TabularEditor.Portable.zip', Folder: str = 'Tabular_Editor_2', Auto_Remove = True ) Runs a request.get() to retrieve the zip file from web. Will unzip response and store in directory. Will also register the removal of the new directory and files when exiting program. Args Download_Location (str, optional) : File path for zip of Tabular Editor 2. Defaults to [Tabular Editor 2 Github Zip Location]'https://github.com/TabularEditor/TabularEditor/releases/download/2.16.7/TabularEditor.Portable.zip'. Folder (str, optional) : New Folder Location. Defaults to 'Tabular_Editor_2'. Auto_Remove (bool, optional) : Boolean to determine auto removal of files once script exits. Defaults to True. Returns str : description","title":"Download_Tabular_Editor"},{"location":"Tabular/","text":"Tabular source Tabular( CONNECTION_STR: str ) Tabular Class to perform operations: Microsoft.AnalysisServices.Tabular Args CONNECTION_STR (str) : Valid Connection String for connecting to a Tabular Model. Methods: .Reload_Model_Info source .Reload_Model_Info() Runs on init iterates through details, can be called after any model changes. Called in SaveChanges() Returns bool : True if successful .Disconnect source .Disconnect() Disconnects from Model Returns bool : True if successful .Refresh source .Refresh( Object: Union[str, Table, Partition, Iterable], RefreshType = RefreshType.Full, Run: bool = True ) Input Object(s) to be refreshed in the tabular model. Combine with .SaveChanges() to actually run the refresh on the model. Args Object (Union[str,Table,Partition,Iterable]) : Can be str(table name only), Table object, Partition object, or an iterable combination of the three. RefreshType ( type , optional) : RefreshType . Defaults to RefreshType.Full. .Update source .Update( UpdateOptions: UpdateOptions = UpdateOptions.ExpandFull ) Update Model Args UpdateOptions (UpdateOptions, optional) : See above MS Doc link. Defaults to UpdateOptions.ExpandFull. Returns None : Placeholder to eventually change. .SaveChanges source .SaveChanges() .Backup_Table source .Backup_Table( table_str: str ) USE WITH CAUTION, EXPERIMENTAL. Backs up table in memory, brings with it measures, columns, hierarchies, relationships, roles, etc. It will add suffix '_backup' to all objects. Refresh is performed from source during backup. Args table_str (str, optional) : Name of Table. Returns bool : Returns True if Successful, else will return error. .Revert_Table source .Revert_Table( table_str: str ) USE WITH CAUTION, EXPERIMENTAL. This is used in conjunction with Backup_Table(). It will take the 'TableName_backup' and replace with the original. Example scenario -> 1. model.Backup_Table('TableName') 2. perform any proposed changes in original 'TableName' 3. validate changes in 'TableName' 4. if unsuccessful run model.Revert_Table('TableName') Args table_str (str) : Name of table. Returns bool : Returns True if Successful, else will return error. .Query source .Query( Query_Str: str ) Executes Query on Model and Returns Results in Pandas DataFrame Args Query_Str (str) : Dax Query. Note, needs full syntax (ex: EVALUATE). See https://docs.microsoft.com/en-us/dax/dax-queries Returns DataFrame : Returns dataframe with results .Query_Every_Column source .Query_Every_Column( query_function: str = 'COUNTROWS(VALUES(_))' ) This will dynamically create a query to pull all columns from the model and run the query function. It will replace the _ with the column to run. Args query_function (str, optional) : Dax query is dynamically building a query with the UNION & ROW DAX Functions. Returns DataFrame : Returns dataframe with results. .Query_Every_Table source .Query_Every_Table( query_function: str = 'COUNTROWS(_)' ) This will dynamically create a query to pull all tables from the model and run the query function. It will replace the _ with the table to run. Args query_function (str, optional) : Dax query is dynamically building a query with the UNION & ROW DAX Functions. Defaults to 'COUNTROWS(_)'. Returns DataFrame : Returns dataframe with results .Analyze_BPA source .Analyze_BPA( Tabular_Editor_Exe: str, Best_Practice_Analyzer: str ) Takes your Tabular Model and performs TE2s BPA. Runs through Command line. Tabular Editor BPA Tabular Editor Command Line Options Args Tabular_Editor_Exe (str) : TE2 Exe File path. Feel free to use class TE2().EXE_Path or provide your own. Best_Practice_Analyzer (str) : BPA json file path. Feel free to use class BPA().Location or provide your own. Defualts to https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json Returns Assuming no failure, will return list of BPA violations. Else will return error from command line. .Create_Table source .Create_Table( df: pd.DataFrame, table_name: str ) Creates tables from pd.DataFrame as an M-Partition. So will convert the dataframe to M-Partition logic via the M query table constructor. Runs refresh and will update model. Args df (pd.DataFrame) : DataFrame to add to model table_name (str) : description Returns bool : True if successful","title":"Tabular"},{"location":"Tabular/#_1","text":"","title":""},{"location":"Tabular/#tabular","text":"source Tabular( CONNECTION_STR: str ) Tabular Class to perform operations: Microsoft.AnalysisServices.Tabular Args CONNECTION_STR (str) : Valid Connection String for connecting to a Tabular Model. Methods:","title":"Tabular"},{"location":"Tabular/#reload_model_info","text":"source .Reload_Model_Info() Runs on init iterates through details, can be called after any model changes. Called in SaveChanges() Returns bool : True if successful","title":".Reload_Model_Info"},{"location":"Tabular/#disconnect","text":"source .Disconnect() Disconnects from Model Returns bool : True if successful","title":".Disconnect"},{"location":"Tabular/#refresh","text":"source .Refresh( Object: Union[str, Table, Partition, Iterable], RefreshType = RefreshType.Full, Run: bool = True ) Input Object(s) to be refreshed in the tabular model. Combine with .SaveChanges() to actually run the refresh on the model. Args Object (Union[str,Table,Partition,Iterable]) : Can be str(table name only), Table object, Partition object, or an iterable combination of the three. RefreshType ( type , optional) : RefreshType . Defaults to RefreshType.Full.","title":".Refresh"},{"location":"Tabular/#update","text":"source .Update( UpdateOptions: UpdateOptions = UpdateOptions.ExpandFull ) Update Model Args UpdateOptions (UpdateOptions, optional) : See above MS Doc link. Defaults to UpdateOptions.ExpandFull. Returns None : Placeholder to eventually change.","title":".Update"},{"location":"Tabular/#savechanges","text":"source .SaveChanges()","title":".SaveChanges"},{"location":"Tabular/#backup_table","text":"source .Backup_Table( table_str: str ) USE WITH CAUTION, EXPERIMENTAL. Backs up table in memory, brings with it measures, columns, hierarchies, relationships, roles, etc. It will add suffix '_backup' to all objects. Refresh is performed from source during backup. Args table_str (str, optional) : Name of Table. Returns bool : Returns True if Successful, else will return error.","title":".Backup_Table"},{"location":"Tabular/#revert_table","text":"source .Revert_Table( table_str: str ) USE WITH CAUTION, EXPERIMENTAL. This is used in conjunction with Backup_Table(). It will take the 'TableName_backup' and replace with the original. Example scenario -> 1. model.Backup_Table('TableName') 2. perform any proposed changes in original 'TableName' 3. validate changes in 'TableName' 4. if unsuccessful run model.Revert_Table('TableName') Args table_str (str) : Name of table. Returns bool : Returns True if Successful, else will return error.","title":".Revert_Table"},{"location":"Tabular/#query","text":"source .Query( Query_Str: str ) Executes Query on Model and Returns Results in Pandas DataFrame Args Query_Str (str) : Dax Query. Note, needs full syntax (ex: EVALUATE). See https://docs.microsoft.com/en-us/dax/dax-queries Returns DataFrame : Returns dataframe with results","title":".Query"},{"location":"Tabular/#query_every_column","text":"source .Query_Every_Column( query_function: str = 'COUNTROWS(VALUES(_))' ) This will dynamically create a query to pull all columns from the model and run the query function. It will replace the _ with the column to run. Args query_function (str, optional) : Dax query is dynamically building a query with the UNION & ROW DAX Functions. Returns DataFrame : Returns dataframe with results.","title":".Query_Every_Column"},{"location":"Tabular/#query_every_table","text":"source .Query_Every_Table( query_function: str = 'COUNTROWS(_)' ) This will dynamically create a query to pull all tables from the model and run the query function. It will replace the _ with the table to run. Args query_function (str, optional) : Dax query is dynamically building a query with the UNION & ROW DAX Functions. Defaults to 'COUNTROWS(_)'. Returns DataFrame : Returns dataframe with results","title":".Query_Every_Table"},{"location":"Tabular/#analyze_bpa","text":"source .Analyze_BPA( Tabular_Editor_Exe: str, Best_Practice_Analyzer: str ) Takes your Tabular Model and performs TE2s BPA. Runs through Command line. Tabular Editor BPA Tabular Editor Command Line Options Args Tabular_Editor_Exe (str) : TE2 Exe File path. Feel free to use class TE2().EXE_Path or provide your own. Best_Practice_Analyzer (str) : BPA json file path. Feel free to use class BPA().Location or provide your own. Defualts to https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json Returns Assuming no failure, will return list of BPA violations. Else will return error from command line.","title":".Analyze_BPA"},{"location":"Tabular/#create_table","text":"source .Create_Table( df: pd.DataFrame, table_name: str ) Creates tables from pd.DataFrame as an M-Partition. So will convert the dataframe to M-Partition logic via the M query table constructor. Runs refresh and will update model. Args df (pd.DataFrame) : DataFrame to add to model table_name (str) : description Returns bool : True if successful","title":".Create_Table"},{"location":"Traces/","text":"Base_Trace source Base_Trace( Tabular_Class, Trace_Events: List[TraceEvent], Trace_Event_Columns: List[TraceColumn], Handler: Callable ) Generates Trace to be run on Server. This is the base class to customize the type of Trace you are looking for. Server Traces Args Tabular_Class (Tabular) : Tabular Class to retrieve the connected Server and Model. Trace_Events (List[TraceEvent]) : List of Trace Events that you wish to track. TraceEventClass Trace_Event_Columns (List[TraceColumn]) : List of Trace Event Columns you with to track. TraceEventColumn Handler (Callable) : Function to call when Trace returns response. Input needs to be two arguments. One is source (Which is currently None... Need to investigate why). Second is TraceEventArgs Methods: .Build source .Build() Run on initialization. This will take the inputed arguments for the class and attempt to build the Trace. Returns bool : True if successful .Arguments source .Arguments( Trace_Events: List[TraceEvent], Trace_Event_Columns: List[TraceColumn], Handler: Callable ) .Add source .Add() Runs on initialization. Adds built Trace to the Server. Returns int : Return int of placement in Server.Traces.get_Item(int) .Update source .Update() Runs on initialization. Syncs with Server. Returns None : Returns None. Unless unsuccessful then it will return the error from Server. .Start source .Start() Call when you want to start the Trace Returns None : Returns None. Unless unsuccessful then it will return the error from Server. .Stop source .Stop() Call when you want to stop the Trace Returns None : Returns None. Unless unsuccessful then it will return the error from Server. .Drop source .Drop() Call when you want to drop the Trace Returns None : Returns None. Unless unsuccessful then it will return the error from Server. .Query_DMV_For_Event_Categories source .Query_DMV_For_Event_Categories() Internal use. Called during the building process to locate allowed columns for event categories. This is done by executing a Tabular().Query() on the DISCOVER_EVENT_CATEGORIES table in the DMV. Then the function will parse the results, as it is xml inside of rows. Returns type : description Refresh_Trace source Refresh_Trace( Tabular_Class, Trace_Events: List[TraceEvent] = [TraceEventClass.ProgressReportBegin, TraceEventClass.ProgressReportCurrent, TraceEventClass.ProgressReportEnd, TraceEventClass.ProgressReportError], Trace_Event_Columns: List[TraceColumn] = [TraceColumn.EventSubclass, TraceColumn.CurrentTime, TraceColumn.ObjectName, TraceColumn.ObjectPath, TraceColumn.DatabaseName, TraceColumn.SessionID, TraceColumn.TextData, TraceColumn.EventClass, TraceColumn.ProgressTotal], Handler: Callable = default_refresh_handler ) Subclass of Base_Trace. For built-in Refresh Tracing. Args Base_Trace ( type ) : description","title":"Trace"},{"location":"Traces/#_1","text":"","title":""},{"location":"Traces/#base_trace","text":"source Base_Trace( Tabular_Class, Trace_Events: List[TraceEvent], Trace_Event_Columns: List[TraceColumn], Handler: Callable ) Generates Trace to be run on Server. This is the base class to customize the type of Trace you are looking for. Server Traces Args Tabular_Class (Tabular) : Tabular Class to retrieve the connected Server and Model. Trace_Events (List[TraceEvent]) : List of Trace Events that you wish to track. TraceEventClass Trace_Event_Columns (List[TraceColumn]) : List of Trace Event Columns you with to track. TraceEventColumn Handler (Callable) : Function to call when Trace returns response. Input needs to be two arguments. One is source (Which is currently None... Need to investigate why). Second is TraceEventArgs Methods:","title":"Base_Trace"},{"location":"Traces/#build","text":"source .Build() Run on initialization. This will take the inputed arguments for the class and attempt to build the Trace. Returns bool : True if successful","title":".Build"},{"location":"Traces/#arguments","text":"source .Arguments( Trace_Events: List[TraceEvent], Trace_Event_Columns: List[TraceColumn], Handler: Callable )","title":".Arguments"},{"location":"Traces/#add","text":"source .Add() Runs on initialization. Adds built Trace to the Server. Returns int : Return int of placement in Server.Traces.get_Item(int)","title":".Add"},{"location":"Traces/#update","text":"source .Update() Runs on initialization. Syncs with Server. Returns None : Returns None. Unless unsuccessful then it will return the error from Server.","title":".Update"},{"location":"Traces/#start","text":"source .Start() Call when you want to start the Trace Returns None : Returns None. Unless unsuccessful then it will return the error from Server.","title":".Start"},{"location":"Traces/#stop","text":"source .Stop() Call when you want to stop the Trace Returns None : Returns None. Unless unsuccessful then it will return the error from Server.","title":".Stop"},{"location":"Traces/#drop","text":"source .Drop() Call when you want to drop the Trace Returns None : Returns None. Unless unsuccessful then it will return the error from Server.","title":".Drop"},{"location":"Traces/#query_dmv_for_event_categories","text":"source .Query_DMV_For_Event_Categories() Internal use. Called during the building process to locate allowed columns for event categories. This is done by executing a Tabular().Query() on the DISCOVER_EVENT_CATEGORIES table in the DMV. Then the function will parse the results, as it is xml inside of rows. Returns type : description","title":".Query_DMV_For_Event_Categories"},{"location":"Traces/#refresh_trace","text":"source Refresh_Trace( Tabular_Class, Trace_Events: List[TraceEvent] = [TraceEventClass.ProgressReportBegin, TraceEventClass.ProgressReportCurrent, TraceEventClass.ProgressReportEnd, TraceEventClass.ProgressReportError], Trace_Event_Columns: List[TraceColumn] = [TraceColumn.EventSubclass, TraceColumn.CurrentTime, TraceColumn.ObjectName, TraceColumn.ObjectPath, TraceColumn.DatabaseName, TraceColumn.SessionID, TraceColumn.TextData, TraceColumn.EventClass, TraceColumn.ProgressTotal], Handler: Callable = default_refresh_handler ) Subclass of Base_Trace. For built-in Refresh Tracing. Args Base_Trace ( type ) : description","title":"Refresh_Trace"}]}